// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// This file was modified for use in the DTU course 02247 Compiler Construction

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
BREAK       ::= "break"
BYTE        ::= "byte"
CASE        ::= "case"
CATCH       ::= "catch"
CHAR        ::= "char"
CONST       ::= "const"
CONTINUE    ::= "continue"
DEFAULT     ::= "defualt"
DO          ::= "do"
DOUBLE      ::= "double"
CLASS       ::= "class"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
FINAL       ::= "final"
FINALLY     ::= "finally"
FLOAT       ::= "float"
GOTO        ::= "goto"
IMPLEMENT   ::= "implements"
INTERFACE   ::= "interface"
IF          ::= "if"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
LONG        ::= "long"
NATIVE      ::= "native"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
RETURN      ::= "short"
STRICTFP    ::= "strictfp"
SWITCH      ::= "switch"
SYNCHRONIZED ::= "synchronized"
STATIC      ::= "static"
SUPER       ::= "super"
THROW       ::= "throw"
THROWS      ::= "throws"
TRANSIENT   ::= "transient"
TRY         ::= "try"
THIS        ::= "this"
TRUE        ::= "true"
VOID        ::= "void"
WHILE       ::= "while"

// Operators
ASSIGN      ::= "="
DIV			::= "/"		// Added in Lecture 1
EQUAL       ::= "=="
GT          ::= ">"
INC         ::= "++"
LAND        ::= "&&"
LE          ::= "<="
LNOT        ::= "!"
MINUS       ::= "-"
MINUS_ASSIGN::= "-="
PLUS        ::= "+"
PLUS_ASSIGN ::= "+="
STAR        ::= "*"
MOD         ::= "%"

// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"
COLON       ::= ":"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"



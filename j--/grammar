// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// This file was modified for use in the DTU course 02247 Compiler Construction

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers classDeclaration

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier] 
                       classBody

classBody ::= LCURLY {modifiers memberDecl} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | RETURN [expression] SEMI
            | SEMI 
            | statementExpression SEMI

formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer
                         {COMMA variableInitializer} [COMMA]]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | DOUBLE

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN
                           | DIV_ASSIGN | MOD_ASSIGN
                           | SHIFTR_ASSIGN | USHIFTR_ASSIGN | SHIFTL_ASSIGN
                           | BIT_AND_ASSIGN | BIT_OR_ASSIGN | XOR_ASSIGN) assignmentExpression]

conditionalExpression ::= conditionalOrExpression TERNARY conditionalOrExpression COLON conditionalOrExpression

conditionalOrExpression ::= conditionalAndExpression { LOR conditionalAndExpression } // level 11

conditionalAndExpression ::= inclusiveOrExpression  { LAND inclusiveOrExpression} // level 10

inclusiveOrExpression ::= exclusiveOrExpression { OR exclusiveOrExpression } // level 9

exclusiveOrExpression ::= andExpression { XOR andExpression } // level 8

andExpression ::= equalityExpression { AND equalityExpression } // level 7

equalityExpression ::= relationalExpression  // level 6
                         {(EQ | NEQ) relationalExpression}

relationalExpression ::= shiftExpression       // level 5
                           [(LT | GT | LE | GE) shiftExpression
                           | INSTANCEOF referenceType]

shiftExpression ::= additiveExpression { ( SHIFTL | SHIFTR | USHIFTR ) additiveExpression } // level 4

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | DIV | MOD) unaryExpression}

unaryExpression ::= INC unaryExpression // level 1
                  | DEC unaryExpression
                  | (PLUS | MINUS | TILDE) unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression // cast
                        | LPAREN // cast
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression

postfixExpression ::= primary {selector} {INC | DEC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments
                  | DOT IDENTIFIER [arguments]
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier)
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL | DOUBLE_LITERAL
          | TRUE        | FALSE        | NULL
